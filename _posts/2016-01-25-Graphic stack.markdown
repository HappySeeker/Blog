---
layout: post
title:  "图形栈&架构"
date:   2016-01-25 06:40:59
author: Jiang Biao
categories: Graphic
---
# 闲话
刚转向图形方向研究时，常会感到迷茫，不知从何处开始，因为乍看图形领域内的模块和陌生的概念似乎多出了我的预期，看似比之前认为足够复杂的Linux内核更加复杂，内容更**丰富**，事实似乎确实如此。

现在看似有些感觉了，回想当初的迷茫，又感觉很正常，经历过此般*阵痛*后方能有更深的领悟。

闲话不多说，先说说从**图形架构**开始吧，说到**图形架构**，首先需要了解的就是**图形栈(Graphic Stack)**了，从前甚至没有听说过这个术语，就从这里开始吧。
# 图形栈
**图形栈**其实就是图形环境中的层次结构，对于复杂的架构，优秀的设计(或者说当前流行的设计)总是层次分明的，为什么？松耦合，更灵活，依赖倒置，单一职责，接口分离...，Linux内核中也随处可见类似的设计。

关于**图形栈**，网上也有一些资料，但在最初切换到该领域开始分析时，看到这些让人眼花缭乱的图和理不清的关系，总会觉得头痛，现在回想起来，主要是因为：

- 不一致。不同的人对**图形栈**的理解不一样，画出来的图也有些差别，如今明白，似乎确实没有完全标准的答案，本文也是根据自己的理解来描述，如果不当之处，欢迎指正。

- 架构太复杂。整个**图形栈**中，涉及的模块太多，包括各种三方(甚至闭源)的模块，各种技术：3D加速、2D加速、OpenGL、Mesa、GLX、GTK2+、GTK3+、QT、Wayland、Xorg、视频加速、Cairo、Clutter、Mutter、Mir、Gnome-Shell、Unity、Compiz、合成器、窗口管理器...，各个模块间关系错综复杂，上下层关系、包含关系、并列关系等等，足以杀死柔弱的大脑细胞。


当前流行的图形系统(针对Xorg的环境，Wayland和其他后端暂不讨论)的层次结构可用如下图说明：

Client App                 Xorg
Graphic ToolKit(GTK+/QT...)
Xlib/Xcb LibGL
Mesa
LibDrm
Dri Driver

kernel
DRM
Graphic HardWare(GPU)

 


| name        | desc  |
| -----       |:-----:|
| Application | 上层应用程序 |


